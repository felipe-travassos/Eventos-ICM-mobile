import { checkPaymentStatus, PaymentStatusResponse } from './payments';

export interface PaymentStatusChecker {
    startChecking: (paymentId: string, registrationId: string, onStatusChange: (status: PaymentStatusResponse) => void) => void;
    stopChecking: () => void;
    checkOnce: (paymentId: string, registrationId: string) => Promise<PaymentStatusResponse>;
}

class PaymentStatusCheckerImpl implements PaymentStatusChecker {
    private intervalId: NodeJS.Timeout | null = null;
    private isChecking = false;

    startChecking(
        paymentId: string, 
        registrationId: string, 
        onStatusChange: (status: PaymentStatusResponse) => void
    ): void {
        if (this.isChecking) {
            console.log('‚ö†Ô∏è Verifica√ß√£o de status j√° est√° em andamento');
            return;
        }

        this.isChecking = true;
        console.log('üîÑ Iniciando verifica√ß√£o autom√°tica de status do pagamento');

        // Primeira verifica√ß√£o imediata
        this.checkOnce(paymentId, registrationId)
            .then(onStatusChange)
            .catch(error => console.error('Erro na primeira verifica√ß√£o:', error));

        // Verifica√ß√µes peri√≥dicas a cada 10 segundos
        this.intervalId = setInterval(async () => {
            try {
                const status = await this.checkOnce(paymentId, registrationId);
                onStatusChange(status);

                // Para a verifica√ß√£o se o pagamento foi aprovado, rejeitado ou cancelado
                if (['approved', 'rejected', 'cancelled'].includes(status.status)) {
                    console.log(`‚úÖ Status final recebido: ${status.status}. Parando verifica√ß√£o.`);
                    this.stopChecking();
                }
            } catch (error) {
                console.error('‚ùå Erro na verifica√ß√£o peri√≥dica:', error);
            }
        }, 10000); // 10 segundos
    }

    stopChecking(): void {
        if (this.intervalId) {
            clearInterval(this.intervalId);
            this.intervalId = null;
        }
        this.isChecking = false;
        console.log('‚èπÔ∏è Verifica√ß√£o de status interrompida');
    }

    async checkOnce(paymentId: string, registrationId: string): Promise<PaymentStatusResponse> {
        return await checkPaymentStatus(paymentId, registrationId);
    }
}

// Singleton instance
export const paymentStatusChecker = new PaymentStatusCheckerImpl();

// Hook para React Native
export const usePaymentStatusChecker = () => {
    return {
        startChecking: paymentStatusChecker.startChecking.bind(paymentStatusChecker),
        stopChecking: paymentStatusChecker.stopChecking.bind(paymentStatusChecker),
        checkOnce: paymentStatusChecker.checkOnce.bind(paymentStatusChecker),
    };
};